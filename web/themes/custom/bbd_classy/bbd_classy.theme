<?php

/**
 * @file
 * Functions to support theming in the theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\block\Entity\Block;
use Drupal\media\Entity\Media;

/**
 * Implements template_preprocess_page().
 */
function bbd_classy_preprocess_page(&$variables)
{
  if (isset($variables['node'])) {
    $node = $variables['node'];
    // Adds additional classes.
    if ($node && is_int($node)) {
      $node = Node::load($node);
    }

    if ($node instanceof NodeInterface) {
      $path = 'path' . Html::cleanCssIdentifier($node->toUrl()->toString());
      $variables['attributes']['class'][] = $node->getType();
      $variables['attributes']['class'][] = $path;
    }
  }
}

/**
 * Implements hook_preprocess_block
 */
function bbd_classy_preprocess_block(&$variables)
{
  /**
   * add class to page_title block to hide & show.
   */
  if ($variables['plugin_id'] ==  'page_title_block') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && is_numeric($node)) {
      $node = Node::load($node);
    }

    if ($node) {
      if ($node->getType() == 'page' || $node->getType() == 'landing_page') {

        if ($node->hasField('field_hide_title') && $node->get('field_hide_title')->value == 1) {
          $variables['attributes']['class'][] = 'visually-hidden';
        }
      } elseif ($node->getType() == 'homepage') {
        $variables['attributes']['class'][] = 'visually-hidden';
        $variables['attributes']['class'][] = 'Holly-Goldehidden';
      }
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function bbd_classy_preprocess_paragraph(&$vars)
{
  $paragraph = $vars['paragraph'];
  if ($paragraph->hasField('field_background_colour') && !$paragraph->get('field_background_colour')->isEmpty()) {
    $color = $paragraph->get('field_background_colour')->value;
    $vars['attributes']['class'][] = 'paragraph-bg--' . $color;
    //$variables['documentbg'] = 'media-bg--' . $color;
  }

  if ($paragraph->hasField('field_documents') && !$paragraph->get('field_documents')->isEmpty()) {
    $document_field = $paragraph->get('field_documents')->first()->getValue();
    $media = Media::load($document_field['target_id']);
    $bg_color = $media->get('field_background_colour')->value;
    //$variables['documentbg'] = 'media-bg--' . $bg_color;
  }
}

/**
 * Implements hook_preprocess_field().
 */
function bbd_classy_preprocess_field(&$variables)
{
  if ($variables['entity_type'] == 'media') {
    foreach ($variables['items'] as $key => $item) {
      $vars['attributes']['class'][] = 'myclass';
    }
  }

  if ($variables['element']['#field_name'] == 'field-documents') {
    foreach (array_keys($variables['items']) as $index) {
      $variables['items'][$index]['content']['#item_attributes']['class'][] = 'my-img-class';
    }
  }
}

/**
 * Prepares variables for media templates.
 *
 * Default template: media.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - media: An individual media for display.
 */
function bbd_class_preprocess_media(&$variables)
{
  /** @var \Drupal\media_entity\MediaInterface $media */
  $media = $variables['elements']['#media'];

  $variables['media'] = $media;
  $media_type = $media->label();

  $variables['attributes']['class'][] = 'myclassNOW';

  /*
  if (!$media->isPublished()) {
    $variables['attributes']['class'][] = 'unpublished';
  }

  if ($media_type == 'document') {
    foreach ($variables['items'] as $key => $item) {
      $variables['attributes']['class'][] = 'myclassNOW';
    }
  }
  */
}
